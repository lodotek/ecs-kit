#!/bin/bash

# Change STACK to be the name of your app
STACK="helloworld"
ENVIRONMENT=(dev qa prod)
ARGS=(create delete update)
VERSION=latest

# Check arg position is not something whacky or blank
if [[ ! "${ENVIRONMENT[*]}" =~ $2 || ! "${ARGS[*]}" =~ $1 ]]; then
  cat <<EOF

  Stack Name: $STACK

  $0 create  [${ENVIRONMENT[*]}] [db] - Create stack from cft-ecs.json
  $0 delete  [${ENVIRONMENT[*]}] [db] - Delete stack name $STACK
  $0 update  [${ENVIRONMENT[*]}]      - Update stack from version or latest

  you can override latest version for create and update
  $0 update ${ENVIRONMENT[0]} 0.0.1

  Database command example, database will be altered by cft-db.json
  $0 create ${ENVIRONMENT[0]} db
  $0 delete ${ENVIRONMENT[0]} db

  Example
  $0 create ${ENVIRONMENT[0]} db  # Create DB
  $0 create ${ENVIRONMENT[0]}     # Create Web / App Environment

EOF
  exit 0
fi

START=$(date +%s)

# Check if version is passed as an argument
if [[ "$3" != "" ]]; then
  VERSION="$3"
fi

# Delete stack
if [[ "$1" = "delete" ]]; then
  if [[ "${ENVIRONMENT[*]}" =~ $2 ]]; then
    if [[ "$3" = "db" ]]; then
      aws cloudformation delete-stack --stack-name "$STACK"-"$2"-db
      aws cloudformation wait stack-delete-complete --stack-name "$STACK"-"$2"-db
      exit 0
    fi
    aws cloudformation delete-stack --stack-name "$STACK"-"$2"
    aws cloudformation wait stack-delete-complete --stack-name "$STACK"-"$2"
  else
    echo "$0 delete [${ENVIRONMENT[*]}]" && echo && exit 1
  fi
fi


# Update stack
if [[ "$1" = "update" ]]; then
  if [[ "${ENVIRONMENT[*]}" =~ $2 ]]; then
    # Create temp task definition
    cp -f task-definition.json task-definition.bk
    if [[ $(uname -s) = "Darwin" ]]; then
      sed -i "" "s/stackname/$STACK-$2/g" task-definition.json
      sed -i "" "s/$STACK:latest/$STACK:$VERSION/g" task-definition.json
    else
      sed -i "s/stackname/$STACK-$2/g" task-definition.json
      sed -i "s/$STACK:latest/$STACK:$VERSION/g" task-definition.json
    fi
    # Update service with new task definition
    aws ecs register-task-definition --cli-input-json file://task-definition.json
    aws ecs update-service --service "$STACK"-"$2" --task-definition "$STACK"-"$2" --cluster "$STACK"-"$2" --desired-count 4
    # Write back orginal task definition
    mv -f task-definition.bk task-definition.json
  else
    echo "$0 update [${ENVIRONMENT[*]}]" && echo && exit 1
  fi
fi


# Create stack
if [[ "$1" = "create" ]]; then
  if [[ "${ENVIRONMENT[*]}" =~ $2 ]]; then
    if [[ "$DBUSER" != "" ]] && [[ "$DBPASS" != "" ]]; then
      if [[ -f "cft-ecs.json" ]] && [[ -f "task-definition.json" ]]; then
        # Create DB
        if [[ "$3" = "db" ]]; then
          aws cloudformation create-stack --stack-name "$STACK"-"$2"-db --template-body file://cft-db.json --parameters ParameterKey=DBuser,ParameterValue="$DBUSER" ParameterKey=DBpassword,ParameterValue="$DBPASS" ParameterKey=Environment,ParameterValue="$2"
          aws cloudformation wait stack-create-complete --stack-name "$STACK"-"$2"-db
          exit 0
        fi
        # Create stack from CFT and wait to follow next steps
        aws cloudformation create-stack --stack-name "$STACK"-"$2" --template-body file://cft-ecs.json --parameters ParameterKey=DBuser,ParameterValue="$DBUSER" ParameterKey=DBpassword,ParameterValue="$DBPASS" ParameterKey=Environment,ParameterValue="$2"
        aws cloudformation wait stack-create-complete --stack-name "$STACK"-"$2"
        # Create first fake service / task
        aws ecs register-task-definition --family "$STACK" --container-definitions name="$STACK"-container,image=fake,memory=100
        aws ecs create-service --service-name "$STACK"-"$2" --task-definition "$STACK"-"$2" --desired-count 0 --cluster "$STACK"-"$2" --deployment-configuration maximumPercent=100,minimumHealthyPercent=50
        # Create update task
        # Create temp task definition
        cp -f task-definition.json task-definition.bk
        if [[ $(uname -s) = "Darwin" ]]; then
          sed -i "" "s/stackname/$STACK-$2/g" task-definition.json
          sed -i "" "s/$STACK:latest/$STACK:$VERSION/g" task-definition.json
        else
          sed -i "s/stackname/$STACK-$2/g" task-definition.json
          sed -i "s/$STACK:latest/$STACK:$VERSION/g" task-definition.json
        fi
        # Update service with new task definition
        aws ecs register-task-definition --cli-input-json file://task-definition.json
        aws ecs update-service --service "$STACK"-"$2" --task-definition "$STACK"-"$2" --cluster "$STACK"-"$2" --desired-count 4
        # Move back orginal task definition
        mv -f task-definition.bk task-definition.json
      else
        echo "Environment cloudformation template or task definition is not present" && echo && exit 1
      fi
    else
      echo "DBUSER & DBPASS env variable must be exported" && echo && exit 1
    fi
  fi
fi


FINISH=$(date +%s)
COMPLETE=$((FINISH - START))
MINS=$((COMPLETE / 60))
echo && echo "$1 $2 took $MINS minute(s) to run" && echo